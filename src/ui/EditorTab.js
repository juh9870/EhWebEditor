"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorTab = void 0;
const $ = require("jquery");
const types_1 = require("../types");
const schema_1 = require("../schema/schema");
const utils_1 = require("../utils");
// const JSONEditor = require("@json-editor/json-editor").JSONEditor;
// declare global {
//     const JSONEditor:any;
// }
let swr = (obj, r) => {
    for (let key of Object.getOwnPropertyNames(obj)) {
        let val = obj[key];
        if (typeof val === "string") {
            if (val.match(/^#[0-9a-fA-F]{8}$/)) {
                let split = val.match(/[0-9a-fA-F]{2}/g);
                if (r) {
                    split.unshift(split.pop());
                }
                else {
                    split.push(split.shift());
                }
                obj[key] = "#" + split.join("");
            }
        }
        else if (val && typeof val === "object" || Array.isArray(val)) {
            swr(val, r);
        }
    }
    return obj;
};
let editors = {};
let holders = {};
let current = types_1.ItemType.Undefined;
let curData;
class EditorTab {
    static async init() {
        let root = $("#contentHolder");
        for (let editor of utils_1.values(editors)) {
            editor.destroy();
        }
        holders = {};
        root.empty();
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
            let typeSchema = schema_1.schemaForType(type);
            let holder = $(`<div id="editor_holder" data-theme="html"></div>`);
            root.append(holder);
            holders[type] = holder;
            editors[type] = new JSONEditor(holder[0], {
                schema: typeSchema,
                "template": "default",
                "show_errors": "always",
                "required_by_default": 1,
                "show_opt_in": 1,
                "disable_properties": 1,
                "enable_array_copy": 1,
                "disable_array_delete_all_rows": 1,
                "disable_array_delete_last_row": 1,
                "prompt_before_delete": 1
            });
        }
        EditorTab.closeAll();
    }
    static closeAll() {
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
            EditorTab.close(type);
        }
    }
    static close(type) {
        // editors[type].disable();
        holders[type].hide();
    }
    static show(type) {
        EditorTab.close(current);
        current = type;
        // editors[type].enable();
        holders[type].show();
    }
    static feedData(data) {
        let type = data.ItemType;
        EditorTab.show(type);
        editors[current].setValue({});
        // let hold = $(editors[current].element);
        // let inp = hold.find(".je-switcher")[0] as HTMLSelectElement;
        // inp.value=ItemTypesMapRev[type];
        // let ev = new Event('change');
        // inp.dispatchEvent(ev);
        curData = swr(utils_1.clone(data), false);
        editors[current].setValue(curData);
    }
    static getData() {
        let data = editors[current].getValue();
        return swr(utils_1.clone(data), true);
    }
}
exports.EditorTab = EditorTab;
//# sourceMappingURL=data:application/json;base64,