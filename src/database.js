"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const types_1 = require("./types");
const utils_1 = require("./utils");
class Database {
    constructor() {
        this.mappings = {};
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
            this.mappings[type] = {};
        }
        this.errors = [];
    }
    async tryAddFile(path, data) {
        var _a, _b, _c;
        try {
            let json = JSON.parse(data);
            if (!json.ItemType)
                return false;
            let old = this.mappings[json.ItemType][(_a = json.Id) !== null && _a !== void 0 ? _a : 0];
            if (old) {
                this.errors.push(`${path} have same ID as ${old.path}`);
                return true;
            }
            this.mappings[json.ItemType][(_b = json.Id) !== null && _b !== void 0 ? _b : 0] = {
                ItemType: json.ItemType,
                Id: (_c = json.Id) !== null && _c !== void 0 ? _c : 0,
                path: path,
                value: data
            };
            return true;
        }
        catch (e) {
            return false;
        }
    }
    err(message) {
        console.warn(message);
        alert(message);
    }
    async tryApplyChanges(old, changed) {
        if (old.Id != changed.Id) {
            let targ = this.mappings[changed.ItemType][changed.Id];
            if (targ) {
                this.err(`Id ${types_1.ItemTypesMapRev[changed.ItemType]}.${changed.Id} is already occupied by ${targ.path}`);
                changed.Id = old.Id;
            }
            else {
                this.mappings[changed.ItemType][changed.Id] = this.mappings[changed.ItemType][old.Id];
                delete this.mappings[changed.ItemType][old.Id];
            }
        }
        return true;
    }
}
exports.Database = Database;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBMEY7QUFDMUYsbUNBQStCO0FBSS9CLE1BQWEsUUFBUTtJQUdqQjtRQUZPLGFBQVEsR0FBNEMsRUFBRSxDQUFDO1FBRzFELEtBQUssSUFBSSxJQUFJLElBQUksY0FBTSxDQUFDLG9CQUFZLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQVcsRUFBQyxJQUFXOztRQUMzQyxJQUFJO1lBQ0EsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFFakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBQSxJQUFJLENBQUMsRUFBRSxtQ0FBRSxDQUFDLENBQUMsQ0FBQztZQUVuRCxJQUFHLEdBQUcsRUFBQztnQkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksb0JBQW9CLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RCxPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBQSxJQUFJLENBQUMsRUFBRSxtQ0FBRSxDQUFDLENBQUMsR0FBQztnQkFDckMsUUFBUSxFQUFDLElBQUksQ0FBQyxRQUFRO2dCQUN0QixFQUFFLEVBQUMsTUFBQSxJQUFJLENBQUMsRUFBRSxtQ0FBRSxDQUFDO2dCQUNiLElBQUksRUFBQyxJQUFJO2dCQUNULEtBQUssRUFBQyxJQUFJO2FBQ2IsQ0FBQTtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLENBQUMsRUFBQztZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVPLEdBQUcsQ0FBQyxPQUFjO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQWdCLEVBQUMsT0FBb0I7UUFDOUQsSUFBRyxHQUFHLENBQUMsRUFBRSxJQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUM7WUFDbEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELElBQUcsSUFBSSxFQUFDO2dCQUNKLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSx1QkFBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRSwyQkFBMkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ3RHLE9BQU8sQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQzthQUNyQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsRDtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBbkRELDRCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YWJhc2VGaWxlLCBGaWxlRW50cnksIEl0ZW1UeXBlc01hcCwgSXRlbVR5cGVzTWFwUmV2LCBOdW1iZXJNYXB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7dmFsdWVzfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IHR5cGUgRGF0YWJhc2VGaWxlRW50cnkgPSBGaWxlRW50cnkgJiBEYXRhYmFzZUZpbGVcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRhYmFzZSB7XHJcbiAgICBwdWJsaWMgbWFwcGluZ3M6IE51bWJlck1hcDxOdW1iZXJNYXA8RGF0YWJhc2VGaWxlRW50cnk+PiA9IHt9O1xyXG4gICAgcHVibGljIGVycm9yczpzdHJpbmdbXTtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBmb3IgKGxldCB0eXBlIG9mIHZhbHVlcyhJdGVtVHlwZXNNYXApKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwcGluZ3NbdHlwZV09e307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXJyb3JzPVtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB0cnlBZGRGaWxlKHBhdGg6c3RyaW5nLGRhdGE6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmICghanNvbi5JdGVtVHlwZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IG9sZCA9IHRoaXMubWFwcGluZ3NbanNvbi5JdGVtVHlwZV1banNvbi5JZD8/MF07XHJcblxyXG4gICAgICAgICAgICBpZihvbGQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChgJHtwYXRofSBoYXZlIHNhbWUgSUQgYXMgJHtvbGQucGF0aH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWFwcGluZ3NbanNvbi5JdGVtVHlwZV1banNvbi5JZD8/MF09e1xyXG4gICAgICAgICAgICAgICAgSXRlbVR5cGU6anNvbi5JdGVtVHlwZSxcclxuICAgICAgICAgICAgICAgIElkOmpzb24uSWQ/PzAsXHJcbiAgICAgICAgICAgICAgICBwYXRoOnBhdGgsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTpkYXRhXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBlcnIobWVzc2FnZTpzdHJpbmcpe1xyXG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcclxuICAgICAgICBhbGVydChtZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdHJ5QXBwbHlDaGFuZ2VzKG9sZDpEYXRhYmFzZUZpbGUsY2hhbmdlZDpEYXRhYmFzZUZpbGUpOlByb21pc2U8Ym9vbGVhbj57XHJcbiAgICAgICAgaWYob2xkLklkIT1jaGFuZ2VkLklkKXtcclxuICAgICAgICAgICAgbGV0IHRhcmcgPSB0aGlzLm1hcHBpbmdzW2NoYW5nZWQuSXRlbVR5cGVdW2NoYW5nZWQuSWRdO1xyXG4gICAgICAgICAgICBpZih0YXJnKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyKGBJZCAke0l0ZW1UeXBlc01hcFJldltjaGFuZ2VkLkl0ZW1UeXBlXX0uJHtjaGFuZ2VkLklkfSBpcyBhbHJlYWR5IG9jY3VwaWVkIGJ5ICR7dGFyZy5wYXRofWApO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlZC5JZD1vbGQuSWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdzW2NoYW5nZWQuSXRlbVR5cGVdW2NoYW5nZWQuSWRdPXRoaXMubWFwcGluZ3NbY2hhbmdlZC5JdGVtVHlwZV1bb2xkLklkXTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1hcHBpbmdzW2NoYW5nZWQuSXRlbVR5cGVdW29sZC5JZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0iXX0=