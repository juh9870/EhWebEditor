"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeTab = void 0;
const $ = require("jquery");
const EditorTab_1 = require("./EditorTab");
const equal = require("deep-equal");
require("jstree");
let treeBase;
let tree;
let curPath = "";
let prevData;
let eventLocked = false;
class TreeTab {
    static init(files, database) {
        TreeTab.files = files;
        TreeTab.database = database;
        let holder = $("#treeHolder");
        let folderInput = $(`<input type="file" webkitdirectory multiple>`);
        let saveButton = $(`<input type="button" value="Save database">`);
        holder.append(folderInput);
        holder.append(saveButton);
        treeBase = $(`<div></div>`);
        holder.append(treeBase);
        holder.on("change", async (event) => {
            if (eventLocked)
                return;
            eventLocked = true;
            let _files = Array.from(folderInput[0].files);
            await TreeTab.files.init(_files);
            await TreeTab.redrawTree();
            eventLocked = false;
        });
        saveButton.on('click', async () => {
            if (eventLocked)
                return;
            eventLocked = true;
            await TreeTab.save();
            await TreeTab.files.save();
            eventLocked = false;
        });
    }
    static async redrawTree() {
        if (tree)
            tree.destroy(false);
        tree = treeBase.jstree({
            core: {
                data: await TreeTab.files.treeData(),
                error: console.error,
                multiple: false,
            },
            types: {
                json: {
                    icon: "assets/json.png",
                    max_children: 0
                }
            },
            plugins: ["search", "types", "wholerow"]
        }).jstree(true);
        TreeTab.createEvents();
    }
    static async save() {
        if (!curPath.length)
            return;
        let curData = EditorTab_1.EditorTab.getData();
        if (!equal(curData, prevData, { strict: true })) {
            if (!await TreeTab.database.tryApplyChanges(prevData, curData)) {
                return;
            }
            let curDataStr = JSON.stringify(curData);
            await TreeTab.files.writeFile(curPath, curDataStr);
        }
    }
    static createEvents() {
        treeBase.on('changed.jstree', async function (e, data) {
            var _a;
            if (eventLocked)
                return;
            if (((_a = data === null || data === void 0 ? void 0 : data.node) === null || _a === void 0 ? void 0 : _a.type) !== "json")
                return;
            eventLocked = true;
            await TreeTab.save();
            curPath = await TreeTab.files.getPathFromSelection(data.selected);
            let selected = await TreeTab.files.readFile(curPath);
            prevData = JSON.parse(selected);
            EditorTab_1.EditorTab.feedData(prevData);
            eventLocked = false;
        });
    }
}
exports.TreeTab = TreeTab;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJlZVRhYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRyZWVUYWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEJBQTRCO0FBRTVCLDJDQUFzQztBQUV0QyxvQ0FBcUM7QUFFckMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWxCLElBQUksUUFBZSxDQUFBO0FBQ25CLElBQUksSUFBVyxDQUFDO0FBQ2hCLElBQUksT0FBTyxHQUFDLEVBQUUsQ0FBQztBQUNmLElBQUksUUFBcUIsQ0FBQztBQUMxQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDeEIsTUFBYSxPQUFPO0lBSVQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFZLEVBQUMsUUFBaUI7UUFDN0MsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDdEIsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlCLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQyw4Q0FBOEMsQ0FBNkIsQ0FBQztRQUNoRyxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsNkNBQTZDLENBQTZCLENBQUM7UUFDOUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFCLFFBQVEsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDaEMsSUFBRyxXQUFXO2dCQUFDLE9BQU87WUFDdEIsV0FBVyxHQUFDLElBQUksQ0FBQztZQUNqQixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFD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USxDQUFDLENBQUM7WUFDN0IsV0FBVyxHQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQTVFRCwwQkE0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyAkIGZyb20gXCJqcXVlcnlcIjtcclxuaW1wb3J0IHtGaWxlc30gZnJvbSBcIi4uL2ZpbGVzXCI7XHJcbmltcG9ydCB7RWRpdG9yVGFifSBmcm9tIFwiLi9FZGl0b3JUYWJcIjtcclxuaW1wb3J0IHtEYXRhYmFzZUZpbGV9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgZXF1YWwgPSByZXF1aXJlKFwiZGVlcC1lcXVhbFwiKTtcclxuaW1wb3J0IHtEYXRhYmFzZX0gZnJvbSBcIi4uL2RhdGFiYXNlXCI7XHJcbnJlcXVpcmUoXCJqc3RyZWVcIik7XHJcblxyXG5sZXQgdHJlZUJhc2U6SlF1ZXJ5XHJcbmxldCB0cmVlOkpTVHJlZTtcclxubGV0IGN1clBhdGg9XCJcIjtcclxubGV0IHByZXZEYXRhOkRhdGFiYXNlRmlsZTtcclxubGV0IGV2ZW50TG9ja2VkID0gZmFsc2U7XHJcbmV4cG9ydCBjbGFzcyBUcmVlVGFiIHtcclxuICAgIHByaXZhdGUgc3RhdGljIGZpbGVzOkZpbGVzO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGF0YWJhc2U6RGF0YWJhc2U7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KGZpbGVzOiBGaWxlcyxkYXRhYmFzZTpEYXRhYmFzZSkge1xyXG4gICAgICAgIFRyZWVUYWIuZmlsZXMgPSBmaWxlcztcclxuICAgICAgICBUcmVlVGFiLmRhdGFiYXNlID0gZGF0YWJhc2U7XHJcbiAgICAgICAgbGV0IGhvbGRlciA9ICQoXCIjdHJlZUhvbGRlclwiKTtcclxuICAgICAgICBsZXQgZm9sZGVySW5wdXQgPSAkKGA8aW5wdXQgdHlwZT1cImZpbGVcIiB3ZWJraXRkaXJlY3RvcnkgbXVsdGlwbGU+YCkgYXMgSlF1ZXJ5PEhUTUxJbnB1dEVsZW1lbnQ+O1xyXG4gICAgICAgIGxldCBzYXZlQnV0dG9uID0gJChgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cIlNhdmUgZGF0YWJhc2VcIj5gKSBhcyBKUXVlcnk8SFRNTElucHV0RWxlbWVudD47XHJcbiAgICAgICAgaG9sZGVyLmFwcGVuZChmb2xkZXJJbnB1dCk7XHJcbiAgICAgICAgaG9sZGVyLmFwcGVuZChzYXZlQnV0dG9uKTtcclxuICAgICAgICB0cmVlQmFzZSA9ICQoYDxkaXY+PC9kaXY+YCk7XHJcbiAgICAgICAgaG9sZGVyLmFwcGVuZCh0cmVlQmFzZSk7XHJcbiAgICAgICAgaG9sZGVyLm9uKFwiY2hhbmdlXCIsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZihldmVudExvY2tlZClyZXR1cm47XHJcbiAgICAgICAgICAgIGV2ZW50TG9ja2VkPXRydWU7XHJcbiAgICAgICAgICAgIGxldCBfZmlsZXMgPSBBcnJheS5mcm9tKGZvbGRlcklucHV0WzBdLmZpbGVzIGFzIEZpbGVMaXN0KTtcclxuICAgICAgICAgICAgYXdhaXQgVHJlZVRhYi5maWxlcy5pbml0KF9maWxlcyk7XHJcbiAgICAgICAgICAgIGF3YWl0IFRyZWVUYWIucmVkcmF3VHJlZSgpO1xyXG4gICAgICAgICAgICBldmVudExvY2tlZD1mYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzYXZlQnV0dG9uLm9uKCdjbGljaycsYXN5bmMgKCk9PntcclxuICAgICAgICAgICAgaWYoZXZlbnRMb2NrZWQpcmV0dXJuO1xyXG4gICAgICAgICAgICBldmVudExvY2tlZD10cnVlO1xyXG4gICAgICAgICAgICBhd2FpdCBUcmVlVGFiLnNhdmUoKTtcclxuICAgICAgICAgICAgYXdhaXQgVHJlZVRhYi5maWxlcy5zYXZlKCk7XHJcbiAgICAgICAgICAgIGV2ZW50TG9ja2VkPWZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgcmVkcmF3VHJlZSgpe1xyXG4gICAgICAgIGlmKHRyZWUpdHJlZS5kZXN0cm95KGZhbHNlKTtcclxuICAgICAgICB0cmVlPXRyZWVCYXNlLmpzdHJlZSh7XHJcbiAgICAgICAgICAgIGNvcmU6e1xyXG4gICAgICAgICAgICAgICAgZGF0YTphd2FpdCBUcmVlVGFiLmZpbGVzLnRyZWVEYXRhKCksXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogY29uc29sZS5lcnJvcixcclxuICAgICAgICAgICAgICAgIG11bHRpcGxlOmZhbHNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0eXBlczp7XHJcbiAgICAgICAgICAgICAgICBqc29uOntcclxuICAgICAgICAgICAgICAgICAgICBpY29uOlwiYXNzZXRzL2pzb24ucG5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4X2NoaWxkcmVuOjBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGx1Z2luczpbXCJzZWFyY2hcIixcInR5cGVzXCIsXCJ3aG9sZXJvd1wiXVxyXG4gICAgICAgIH0gYXMgSlNUcmVlU3RhdGljRGVmYXVsdHMpLmpzdHJlZSh0cnVlKTtcclxuICAgICAgICBUcmVlVGFiLmNyZWF0ZUV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2F2ZSgpe1xyXG4gICAgICAgIGlmKCFjdXJQYXRoLmxlbmd0aClyZXR1cm47XHJcbiAgICAgICAgbGV0IGN1ckRhdGE6RGF0YWJhc2VGaWxlID0gRWRpdG9yVGFiLmdldERhdGEoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZighZXF1YWwoY3VyRGF0YSxwcmV2RGF0YSx7c3RyaWN0OnRydWV9KSkge1xyXG4gICAgICAgICAgICBpZighYXdhaXQgVHJlZVRhYi5kYXRhYmFzZS50cnlBcHBseUNoYW5nZXMocHJldkRhdGEsY3VyRGF0YSkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjdXJEYXRhU3RyID0gSlNPTi5zdHJpbmdpZnkoY3VyRGF0YSk7XHJcbiAgICAgICAgICAgIGF3YWl0IFRyZWVUYWIuZmlsZXMud3JpdGVGaWxlKGN1clBhdGgsIGN1ckRhdGFTdHIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUV2ZW50cygpe1xyXG4gICAgICAgIHRyZWVCYXNlLm9uKCdjaGFuZ2VkLmpzdHJlZScsYXN5bmMgZnVuY3Rpb24gKGUsZGF0YSl7XHJcbiAgICAgICAgICAgIGlmKGV2ZW50TG9ja2VkKXJldHVybjtcclxuICAgICAgICAgICAgaWYoZGF0YT8ubm9kZT8udHlwZSE9PVwianNvblwiKXJldHVybjtcclxuICAgICAgICAgICAgZXZlbnRMb2NrZWQ9dHJ1ZTtcclxuICAgICAgICAgICAgYXdhaXQgVHJlZVRhYi5zYXZlKCk7XHJcbiAgICAgICAgICAgIGN1clBhdGg9YXdhaXQgVHJlZVRhYi5maWxlcy5nZXRQYXRoRnJvbVNlbGVjdGlvbihkYXRhLnNlbGVjdGVkKTtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gYXdhaXQgVHJlZVRhYi5maWxlcy5yZWFkRmlsZShjdXJQYXRoKTtcclxuICAgICAgICAgICAgcHJldkRhdGE9SlNPTi5wYXJzZShzZWxlY3RlZCk7XHJcbiAgICAgICAgICAgIEVkaXRvclRhYi5mZWVkRGF0YShwcmV2RGF0YSk7XHJcbiAgICAgICAgICAgIGV2ZW50TG9ja2VkPWZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19