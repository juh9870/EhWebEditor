"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeMappings = void 0;
const types_1 = require("../types");
let map;
class TypeMappings {
    static getMappings() {
        return map !== null && map !== void 0 ? map : (map = require("./typesMaps.json"));
    }
    static resolveConflict(target, entry) {
        let targ = "";
        //LootContent
        if ("MinAmount" in target || "MaxAmount" in target) {
            targ = "LootContent";
        }
        else if (target.ItemType === types_1.ItemType.Technology) {
            targ = "Technology";
        }
        else {
            targ = "Requirement";
        }
        let val = entry[targ];
        let sw = Number(target[val[0].caseVar] || 0);
        let node = val.find(e => e.cases.includes(sw));
        return node.type;
    }
    static fieldType(targ, fieldName) {
        var _a;
        let map = TypeMappings.getMappings();
        let e = (_a = map[fieldName]) !== null && _a !== void 0 ? _a : -1;
        if (typeof e === "number")
            return e;
        return TypeMappings.resolveConflict(targ, e);
    }
}
exports.TypeMappings = TypeMappings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZU1hcHBpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHlwZU1hcHBpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9DQUE2QztBQUU3QyxJQUFJLEdBQWdDLENBQUM7QUFFckMsTUFBYSxZQUFZO0lBQ2QsTUFBTSxDQUFDLFdBQVc7UUFDckIsT0FBTyxHQUFHLGFBQUgsR0FBRyxjQUFILEdBQUcsR0FBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQWdDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFXLEVBQUUsS0FBOEI7UUFDckUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsYUFBYTtRQUNiLElBQUksV0FBVyxJQUFJLE1BQU0sSUFBSSxXQUFXLElBQUksTUFBTSxFQUFFO1lBQ2hELElBQUksR0FBRyxhQUFhLENBQUM7U0FDeEI7YUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssZ0JBQVEsQ0FBQyxVQUFVLEVBQUU7WUFDaEQsSUFBSSxHQUFHLFlBQVksQ0FBQztTQUN2QjthQUFNO1lBQ0gsSUFBSSxHQUFHLGFBQWEsQ0FBQztTQUN4QjtRQUVELElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQWlDLENBQUM7UUFDL0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQVEsRUFBQyxTQUFnQjs7UUFDN0MsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLE1BQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxtQ0FBSSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFHLE9BQU8sQ0FBQyxLQUFHLFFBQVE7WUFBQyxPQUFPLENBQUMsQ0FBQztRQUNoQyxPQUFPLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDSjtBQTVCRCxvQ0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0l0ZW1UeXBlLCBTdHJpbmdNYXB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxubGV0IG1hcDogU3RyaW5nTWFwPFR5cGVNYXBwaW5nRW50cnk+O1xyXG5cclxuZXhwb3J0IGNsYXNzIFR5cGVNYXBwaW5ncyB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE1hcHBpbmdzKCk6IFN0cmluZ01hcDxUeXBlTWFwcGluZ0VudHJ5PiB7XHJcbiAgICAgICAgcmV0dXJuIG1hcCA/PyAobWFwID0gcmVxdWlyZShcIi4vdHlwZXNNYXBzLmpzb25cIikgYXMgU3RyaW5nTWFwPFR5cGVNYXBwaW5nRW50cnk+KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlc29sdmVDb25mbGljdCh0YXJnZXQ6IGFueSwgZW50cnk6IFR5cGVNYXBwaW5nQ29tcGxleEVudHJ5KTogSXRlbVR5cGUge1xyXG4gICAgICAgIGxldCB0YXJnID0gXCJcIjtcclxuICAgICAgICAvL0xvb3RDb250ZW50XHJcbiAgICAgICAgaWYgKFwiTWluQW1vdW50XCIgaW4gdGFyZ2V0IHx8IFwiTWF4QW1vdW50XCIgaW4gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRhcmcgPSBcIkxvb3RDb250ZW50XCI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuSXRlbVR5cGUgPT09IEl0ZW1UeXBlLlRlY2hub2xvZ3kpIHtcclxuICAgICAgICAgICAgdGFyZyA9IFwiVGVjaG5vbG9neVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmcgPSBcIlJlcXVpcmVtZW50XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdmFsID0gZW50cnlbdGFyZ107XHJcbiAgICAgICAgbGV0IHN3ID0gTnVtYmVyKHRhcmdldFt2YWxbMF0uY2FzZVZhcl0gfHwgMCk7XHJcbiAgICAgICAgbGV0IG5vZGUgPSB2YWwuZmluZChlID0+IGUuY2FzZXMuaW5jbHVkZXMoc3cpKSBhcyBUeXBlTWFwcGluZ0NvbXBsZXhFbnRyeVZhbHVlO1xyXG4gICAgICAgIHJldHVybiBub2RlLnR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmaWVsZFR5cGUodGFyZzphbnksZmllbGROYW1lOnN0cmluZyl7XHJcbiAgICAgICAgbGV0IG1hcCA9IFR5cGVNYXBwaW5ncy5nZXRNYXBwaW5ncygpO1xyXG4gICAgICAgIGxldCBlID0gbWFwW2ZpZWxkTmFtZV0gPz8gLTE7XHJcbiAgICAgICAgaWYodHlwZW9mIGU9PT1cIm51bWJlclwiKXJldHVybiBlO1xyXG4gICAgICAgIHJldHVybiBUeXBlTWFwcGluZ3MucmVzb2x2ZUNvbmZsaWN0KHRhcmcsZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFR5cGVNYXBwaW5nRW50cnkgPSBudW1iZXIgfCBUeXBlTWFwcGluZ0NvbXBsZXhFbnRyeTtcclxuZXhwb3J0IHR5cGUgVHlwZU1hcHBpbmdDb21wbGV4RW50cnkgPSBTdHJpbmdNYXA8VHlwZU1hcHBpbmdDb21wbGV4RW50cnlWYWx1ZVtdPjtcclxuZXhwb3J0IHR5cGUgVHlwZU1hcHBpbmdDb21wbGV4RW50cnlWYWx1ZSA9IHtcclxuICAgIHR5cGU6IEl0ZW1UeXBlLFxyXG4gICAgY2FzZXM6IG51bWJlcltdLFxyXG4gICAgY2FzZVZhcjogc3RyaW5nLFxyXG59Il19