"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const types_1 = require("./types");
const utils_1 = require("./utils");
const typeMappings_1 = require("./schema/typeMappings");
let mapps = typeMappings_1.TypeMappings.getMappings();
class Database {
    constructor() {
        this.mappings = {};
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
            this.mappings[type] = {};
        }
        this.errors = [];
    }
    static changeIdRecursive(targ, type, oldId, newId) {
        let changed = false;
        for (let key of utils_1.keys(targ)) {
            let val = targ[key];
            if (val && (typeof val === "object" || Array.isArray(val))) {
                changed = changed || Database.changeIdRecursive(val, type, oldId, newId);
            }
            if (Array.isArray(val) && val.length > 0 && typeof val[0] === "number") {
                let _type = typeMappings_1.TypeMappings.fieldType(this, key.toString());
                if (_type !== type)
                    continue;
                // debugger;
                for (let i = 0; i < val.length; i++) {
                    if (val[i] === oldId)
                        val[i] = newId;
                    changed = true;
                }
            }
            else if (typeof val === "number" && val === oldId) {
                let _type = typeMappings_1.TypeMappings.fieldType(targ, key.toString());
                if (_type !== type)
                    continue;
                // debugger;
                targ[key] = newId;
                changed = true;
            }
        }
        return changed;
    }
    async tryAddFile(path, data) {
        var _a, _b, _c;
        try {
            let json = JSON.parse(data);
            if (!json.ItemType)
                return false;
            let old = this.mappings[json.ItemType][(_a = json.Id) !== null && _a !== void 0 ? _a : 0];
            if (old) {
                this.errors.push(`${path} have same ID as ${old.path}`);
                return true;
            }
            this.mappings[json.ItemType][(_b = json.Id) !== null && _b !== void 0 ? _b : 0] = {
                ItemType: json.ItemType,
                Id: (_c = json.Id) !== null && _c !== void 0 ? _c : 0,
                path: path,
                value: data
            };
            return true;
        }
        catch (e) {
            return false;
        }
    }
    async tryApplyChanges(old, changed, files) {
        var _a, _b;
        old.Id = (_a = old.Id) !== null && _a !== void 0 ? _a : 0;
        changed.Id = (_b = changed.Id) !== null && _b !== void 0 ? _b : 0;
        if (old.Id != changed.Id) {
            if (changed.Id > 2 ** 31 - 1) {
                this.err(`Id ${changed.Id} is too large, it must be ${2 ** 31 - 1} at most!`);
                changed.Id = old.Id;
            }
            else {
                let targ = this.mappings[changed.ItemType][changed.Id];
                if (targ) {
                    this.err(`Id ${types_1.ItemTypesMapRev[changed.ItemType]}.${changed.Id} is already occupied by ${targ.path}`);
                    changed.Id = old.Id;
                }
                else {
                    this.mappings[changed.ItemType][changed.Id] = this.mappings[changed.ItemType][old.Id];
                    delete this.mappings[changed.ItemType][old.Id];
                    await this.changeIds(files, changed.ItemType, old.Id, changed.Id);
                }
            }
        }
        return true;
    }
    async changeIds(files, type, oldId, newId) {
        for (let file of (await files.allFiles())) {
            let data = JSON.parse(file.value);
            if (Database.changeIdRecursive(data, type, oldId, newId)) {
                await files.writeFile(file.path, JSON.stringify(data, undefined, "\t"));
            }
        }
    }
    getIds(type) {
        return utils_1.keys(this.mappings[type]).map(e => Number(e));
    }
    err(message) {
        console.warn(message);
        alert(message);
    }
}
exports.Database = Database;
Database.deleteNumber = 2 ** 32 - 9870;
//# sourceMappingURL=data:application/json;base64,