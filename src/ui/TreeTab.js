"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeTab = void 0;
const $ = require("jquery");
const EditorTab_1 = require("./EditorTab");
const equal = require("deep-equal");
require("jstree");
let treeBase;
let tree;
let curPath = "";
let prevData;
let eventLocked;
let to;
let folderInput;
let saveButton;
let searchInput;
let ready = false;
let cover;
let lockEvents = (text) => {
    cover.find("div")[0].textContent = text;
    if (eventLocked) {
        return;
    }
    eventLocked = true;
    cover.show(0.5);
};
let unlockEvents = () => {
    if (!eventLocked)
        return;
    eventLocked = false;
    cover.hide(0.5);
};
class TreeTab {
    static init(files, database) {
        cover = $(`<div class="cover"><div></div><div class="loader"></div></div>`);
        $("body").append(cover);
        lockEvents("Editor is starting");
        TreeTab.files = files;
        TreeTab.database = database;
        let holder = $("#treeHolder");
        let r1 = $("<div class='r1'></div>");
        let r2 = $("<div class='r2'></div>");
        holder.append(r1);
        holder.append(r2);
        folderInput = $(`<input type="file" webkitdirectory multiple>`);
        saveButton = $(`<input type="button" value="Save database">`);
        let searchLabel = $(`<label for="tree-search">Search: </label>`);
        searchInput = $(`<input id="tree-search" type="search">`);
        r1.append(folderInput);
        r1.append(saveButton);
        r2.append(searchLabel);
        r2.append(searchInput);
        saveButton.prop("disabled", true);
        searchInput.prop("disabled", true);
        treeBase = $(`<div></div>`);
        holder.append(treeBase);
        folderInput.on("change", async (event) => {
            if (eventLocked)
                return;
            lockEvents("Loading database");
            if (ready && prompt("Save before changing database?")) {
                await TreeTab.saveDatabase();
                lockEvents("Loading database");
            }
            await TreeTab.close();
            let _files = Array.from(folderInput[0].files);
            await TreeTab.files.init(_files);
            await TreeTab.redrawTree();
            ready = true;
            unlockEvents();
        });
        saveButton.on('click', async () => {
            if (eventLocked)
                return;
            lockEvents("Saving database (this might take some time on larger database)");
            await TreeTab.saveDatabase();
            unlockEvents();
        });
        searchInput.on('keyup', () => {
            if (!tree)
                return;
            if (to)
                clearTimeout(to);
            to = setTimeout(function () {
                let v = searchInput.val();
                tree.search(v);
            }, 250);
        });
        unlockEvents();
    }
    static async saveDatabase() {
        lockEvents("Archiving database (this might take some time on larger database)");
        await TreeTab.close();
        lockEvents("Preparing download (if this step takes too long, something might b wrong with your device)");
        await TreeTab.files.save();
    }
    static async redrawTree() {
        if (tree)
            tree.destroy(false);
        saveButton.prop("disabled", true);
        searchInput.prop("disabled", true);
        tree = treeBase.jstree({
            core: {
                data: await TreeTab.files.treeData(),
                error: console.error,
                multiple: false,
            },
            types: {
                json: {
                    icon: "assets/json.png",
                    max_children: 0
                }
            },
            search: {
                show_only_matches: true,
                show_only_matches_children: true
            },
            plugins: ["search", "types", "wholerow"]
        }).jstree(true);
        TreeTab.createEvents();
        saveButton.prop("disabled", false);
        searchInput.prop("disabled", false);
    }
    static async save() {
        try {
            if (!curPath.length)
                return;
            let curData = await EditorTab_1.EditorTab.getData();
            if (!equal(curData, prevData, { strict: true })) {
                if (!await TreeTab.database.tryApplyChanges(prevData, curData, this.files)) {
                    return;
                }
                let curDataStr = JSON.stringify(curData, null, "\t");
                await TreeTab.files.writeFile(curPath, curDataStr);
            }
        }
        catch (e) {
            return;
        }
    }
    static async close() {
        await TreeTab.save();
        EditorTab_1.EditorTab.closeAll();
    }
    static createEvents() {
        treeBase.on('changed.jstree', async function (e, data) {
            var _a;
            if (eventLocked)
                return;
            if (((_a = data === null || data === void 0 ? void 0 : data.node) === null || _a === void 0 ? void 0 : _a.type) !== "json")
                return;
            lockEvents("Saving current file.");
            await TreeTab.save();
            curPath = await TreeTab.files.getPathFromSelection(data.selected);
            let selected = await TreeTab.files.readFile(curPath);
            prevData = JSON.parse(selected);
            lockEvents("Opening new file.");
            EditorTab_1.EditorTab.feedData(prevData);
            unlockEvents();
        });
    }
}
exports.TreeTab = TreeTab;
//# sourceMappingURL=data:application/json;base64,