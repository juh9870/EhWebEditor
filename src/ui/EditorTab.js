"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorTab = void 0;
const $ = require("jquery");
const types_1 = require("../types");
const schema_1 = require("../schema/schema");
const utils_1 = require("../utils");
const database_1 = require("../database");
require("select2");
const JSONEditor = require("@json-editor/json-editor").JSONEditor;
// declare global {
//     const JSONEditor:any;
// }
let swr = (obj, r) => {
    for (let key of Object.getOwnPropertyNames(obj)) {
        let val = obj[key];
        if (r && (key.startsWith("$") || val === database_1.Database.deleteNumber)) {
            delete obj[key];
            continue;
        }
        if (typeof val === "string") {
            if (val.match(/^#[0-9a-fA-F]{8}$/)) {
                let split = val.match(/[0-9a-fA-F]{2}/g);
                if (r) {
                    split.unshift(split.pop());
                }
                else {
                    split.push(split.shift());
                }
                obj[key] = "#" + split.join("");
            }
        }
        else if (val && typeof val === "object" || Array.isArray(val)) {
            swr(val, r);
        }
    }
    return obj;
};
let editors = window.editors = {};
let holders = {};
let current = types_1.ItemType.Undefined;
let curData;
let database;
let root;
// debugger;
JSONEditor.defaults.callbacks.template = {};
for (let type of utils_1.values(types_1.ItemTypesMap)) {
    let keyT = type + "_EnumTitleCB";
    let keyV = type + "_EnumValueCB";
    JSONEditor.defaults.callbacks.template[keyT] = (jseditor, e) => {
        if (e.item === database_1.Database.deleteNumber)
            return "None";
        return database.mappings[type][e.item].path;
    };
    JSONEditor.defaults.callbacks.template[keyV] = (jseditor, e) => {
        return e.item;
    };
}
class EditorTab {
    static async init(_database) {
        database = _database;
        root = $("#contentHolder");
        for (let editor of utils_1.values(editors)) {
            editor.destroy();
        }
        holders = {};
        root.empty();
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
        }
        EditorTab.closeAll();
    }
    static closeAll() {
        for (let type of utils_1.values(types_1.ItemTypesMap)) {
            EditorTab.close(type);
        }
    }
    static close(type) {
        var _a;
        // editors[type].disable();
        // holders[type].hide();
        (_a = editors[type]) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    static show(type) {
        EditorTab.close(current);
        current = type;
        let typeSchema = schema_1.schemaForType(type, database);
        let holder = $(`<div id="editor_holder" data-theme="html"></div>`);
        root.append(holder);
        holders[type] = holder;
        editors[type] = new JSONEditor(holder[0], {
            schema: typeSchema,
            "template": "default",
            "show_errors": "always",
            "required_by_default": 1,
            "show_opt_in": 1,
            "disable_properties": 1,
            "enable_array_copy": 1,
            "disable_array_delete_all_rows": 1,
            "disable_array_delete_last_row": 1,
            "prompt_before_delete": 1
        });
        // editors[type].enable();
        holders[type].show();
    }
    static feedData(data) {
        let type = data.ItemType;
        EditorTab.show(type);
        editors[current].setValue({});
        // let hold = $(editors[current].element);
        // let inp = hold.find(".je-switcher")[0] as HTMLSelectElement;
        // inp.value=ItemTypesMapRev[type];
        // let ev = new Event('change');
        // inp.dispatchEvent(ev);
        curData = swr(utils_1.clone(data), false);
        EditorTab.populateTech(curData);
        editors[current].setValue(curData);
    }
    static getData() {
        let data = editors[current].getValue();
        return swr(utils_1.clone(data), true);
    }
    static populateTech(targ) {
    }
}
exports.EditorTab = EditorTab;
//# sourceMappingURL=data:application/json;base64,